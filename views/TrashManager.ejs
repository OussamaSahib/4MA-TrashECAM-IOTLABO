<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trash Manager</title>
    <!--API SOCKET.IO +GoogleMaps-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.2.0/socket.io.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAWczO0nzqJmcu5iLtLfWXe8RF9JgnlRyo&callback=initMap&libraries=maps,marker&v=beta" defer></script></script>
    <link rel="stylesheet" href ="./css/style.css">
</head>
<body>
   <!--TITLE AREA-->
   <div class="TitleArea">
        <!--TITLE-->
        <div class="TitleFlex">
            <h1>TRASH MANAGER</h1>                
        </div>
   </div>



    <!--TABLE AREA-->
    <div class="TableArea">
        <!--INFO SELECTION ZONE-->
        <div class="ZoneSelection">
            <!--TEXT OF THE ZONE-->
            <span class="TextSelection">SELECTION</span>

            <!--CHECKBOX-->
            <div class="ChoiceCheckboxFlex">
                <!--ALL CHECKBOX-->
                <div class="AllCheckboxFlex">
                    <input type="checkbox" id="selectAllCheckbox">
                    <p id="pAll">Select All</p>
                </div>
                <!--RED CHECKBOX-->
                <div class="RedCheckboxFlex">
                    <input type="checkbox" id="selectRedCheckbox">
                    <p id="pRed">Select Filled Trashs</p>
                </div>
            </div>

            <!--NUMBER OF SELECTED/TOTAL TRASH-->
            <div class="InfoNbTrashFlex">
                <p><span class="underline">Trashs:</span><span> </span><span id="SelectedTrash"></span>/<span id="TotalTrash"></span></p>
            </div>

            <!--MAP BUTTON-->
            <div class="MapButtonFlex">
                <button id="MapButton">ROUTE CALCULATION</button>
            </div>
        </div>


        <!--TABLE OF TRASHS-->
        <div class="Table">           
            <!--TABLE-->
            <table id="TableTrashs">
                <!--HEADER-->
                <thead>
                    <tr>
                        <th id="thnumber"></th>
                        <th id="thcheckbox"></th>
                        <th>ID Trash</th>    
                        <th>Filling Level</th>                  
                        <th>Weight [kg]</th>
                        <th>Quantity [cm]</th>
                        <th hidden>Latitude</th>
                        <th hidden>Longitude</th>
                    </tr>
                </thead>

                <!--CONTENT-->
                <tbody id="TableBody">
                    <!--LISTE TRASHS-->
                </tbody>
            </table>
        </div>
    </div>



    <!--MAP AREA-->
    <div class="MapArea">
        <!--TITLE-->
        <div class="TitleMapFlex">
            <h2>MAP</h2>                
        </div>

        <!--MAP-->
        <div id="MapTrash">
        </div>   

        <!--TABLE SUMMARIZING THE ROUTE WITH WAYPOINTS-->
       <div class="SummaryRoute">
            <table id="TableSummaryRoute">
                <thead>
                    <tr>
                        <th id="thletter"></th>
                        <th>ID</th>
                        <th>Address</th>
                    </tr>
                </thead>
                <tbody id="TableBodyy">
                </tbody>
            </table>
       </div>

        <!--SEND ROUTE BUTTON-->
        <button id="SendRouteButton" onclick="SendRouteJSON()">SEND</button>
    </div>
</div>




    <script>
        //LOAD DATA TRASHS FROM JSON
        fetch("/trashs.json")
            .then(response=> response.json())
            .then(data=> {
                console.log(data)

                //IN TABLE TRASHS: 1ROW= EACH TRASH OF TRASHS.JSON
                const TableBody= document.getElementById("TableBody");
                data.forEach((trash, index)=> {
                    //DISPLAY DATAS
                    const row= document.createElement("tr");
                    row.innerHTML= `
                        <td id="tdnumber">${index +1}</td>
                        <td><input type="checkbox" class="component-checkbox"></td>
                        <td>${trash.ID}</td>
                        <td id="LevelfillingTrash${index +1}"></td>
                        <td id="WeightTrash${index +1}">${trash.Weight.toFixed(2)}</td>
                        <td id="QuantityTrash${index +1}">${trash.Quantity}</td>
                        <td id="LatitudeTrash${index +1}" hidden >${trash.Latitude}</td>
                        <td id="LongitudeTrash${index +1}" hidden>${trash.Longitude}</td>`;
                    TableBody.appendChild(row);


                    //COLOR MANAGEMENT (FILL+TEXT)
                    //Recovery Data Weight and Quantity
                    const weight= parseFloat(trash.Weight);
                    const quantity= parseFloat(trash.Quantity);
                    const {Levelfilling, Colorfilling, Colortext, highlightWeight, highlightQuantity}= FillingLevel(weight, quantity);

                    //Fill: % and Background Color
                    const LevelfillingCell= document.getElementById(`LevelfillingTrash${index +1}`);
                    LevelfillingCell.innerText= Levelfilling;
                    LevelfillingCell.style.backgroundColor= Colorfilling;
                    //Weight and Quantity: Color Text
                    const WeightCell= document.getElementById(`WeightTrash${index +1}`);
                    const QuantityCell= document.getElementById(`QuantityTrash${index +1}`);                   
                    if (highlightWeight){
                        WeightCell.style.color= Colortext;
                    } 
                    else{
                        WeightCell.style.color= "green";
                    }
                    if (highlightQuantity){
                        QuantityCell.style.color= Colortext;
                    } 
                    else{
                        QuantityCell.style.color= "green";
                    }
                });
            
 
                //% +GREEN/ORANGE/RED, BY WEIGHT AND QUANTITY
                //FCT TO DEFINE % +COLORS
                function FillingLevel(weight, quantity){
                    //Conversion Weight and Quantity for Float Nb
                    weight= parseFloat(weight);
                    quantity= parseFloat(quantity);
                    //%, Fill Color, Text Color for Weight and Quantity
                    let Levelfilling;
                    let Colorfilling;
                    let Colortext= "green";
                    let highlightWeight= false;
                    let highlightQuantity= false;

                    //SWITCH CASE: 0%,25%,50%,75%,100%
                    switch (true) {
                        //0%: Weight<2,5kg AND Quantity<15cm
                        case (weight<2.5 && quantity<15):
                            Levelfilling= "0%";
                            Colorfilling= "green";
                            break;

                        //25%: 2,5kg<=Weight<5kg OR 15cm<=Quantity<30cm
                        case ((weight>=2.5 && weight<5 && quantity<30) || (quantity>=15 && quantity<30 && weight<5)):
                            Levelfilling= "25%";
                            Colorfilling= "green";
                            break;

                        //50%: 5kg<=Weight<7,5kg OR 30cm<=Quantity<45cm
                        case ((weight>=5 && weight<7.5 && quantity<45) || (quantity>=30 && quantity<45 && weight<7.5)):
                            Levelfilling= "50%";
                            Colorfilling= "green";
                            break;

                        //75%: 7.5kg=<Weight<9kg OR 45cm<=Quantity<54cm
                        case ((weight>=7.5 && weight<9 && quantity<54) || (quantity>=45 && quantity<54 && weight<9)):
                            Levelfilling= "75%";
                            Colorfilling= "orange";
                            Colortext= "orange";
                            highlightWeight= (weight>=7.5 && weight<9);
                            highlightQuantity= (quantity>=45 && quantity<54);                         
                            break;

                        //100%: Weight>=9kg OR Quantity>=54cm
                        case (weight>=9 || quantity>=54):
                            Levelfilling= "100%";
                            Colorfilling= "red";
                            Colortext= "red";
                            highlightWeight= (weight>=9);
                            highlightQuantity= (quantity>=54);
                            break;

                        default:
                            Levelfilling= "Unknown";
                            Colorfilling= "black";
                            break;
                    }
                    return {Levelfilling, Colorfilling, Colortext, highlightWeight, highlightQuantity};
                }
 


                //SELECTION INFOS(WITH CHECKBOX)
                //CHECKBOX
                //ALL CHECKBOX
                document.getElementById("selectAllCheckbox").addEventListener("change",function() {
                    const isChecked= this.checked;
                    //Check-Uncheck all the table checkbox
                    document.querySelectorAll(".component-checkbox").forEach(checkbox=> {
                        checkbox.checked= isChecked;
                    });
                    //If AllCheckbox checked: Check off RedCheckbox
                    if (isChecked){
                        document.getElementById("selectRedCheckbox").checked= false;
                    }
                    UpdateSelectedCount();
                });
             
                //RED CHECKBOX
                document.getElementById("selectRedCheckbox").addEventListener("change",function() {
                    const isRedChecked= this.checked;
                    //1)If AllCheckbox checked: Uncheck AllCheckbox +All checkbox of the table
                    if (isRedChecked && document.getElementById("selectAllCheckbox").checked){
                        document.getElementById("selectAllCheckbox").checked= false;
                        document.querySelectorAll(".component-checkbox").forEach(checkbox=> {
                            checkbox.checked= false;
                        });
                    }
                    //2)Check-Uncheck the checkbox at 100% filling of the table
                    document.querySelectorAll(".component-checkbox").forEach((checkbox, index)=> {
                        const levelCell= document.querySelector(`#LevelfillingTrash${index +1}`);                      
                        if (levelCell && levelCell.innerText==="100%"){
                            checkbox.checked= isRedChecked;
                        } 
                        else{
                            checkbox.checked= false; 
                        }
                    });
                    UpdateSelectedCount();
                });


                //TOTAL TRASH
                document.getElementById("TotalTrash").innerText= document.querySelectorAll(".component-checkbox").length;

                //SELECTED TRASH
                function UpdateSelectedCount() {
                    const selectedCount= document.querySelectorAll(".component-checkbox:checked").length;
                    document.getElementById("SelectedTrash").innerText= selectedCount;
                }
                document.querySelectorAll(".component-checkbox").forEach(checkbox=> {
                    checkbox.addEventListener("change",UpdateSelectedCount);
                });
                UpdateSelectedCount();
            })
        .catch(error=> console.error("Error fetching data:",error));






        //MAP WITH ROUTE
        //FCT MAP
        function initMap() {
            const Map= new google.maps.Map(document.getElementById("MapTrash"), {
                zoom: 13,
                //By default: Bruxelles
                center: {lat: 50.8466, lng: 4.3528}, 
                //Remove Shops
                styles: [
                    {featureType: "poi",
                    stylers: [{visibility: "off"}]}
                ]
            });
            //Path+Drawing of the path
            const directionsService= new google.maps.DirectionsService();
            const directionsRenderer= new google.maps.DirectionsRenderer({
                polylineOptions: {
                    strokeColor: "rgba(70, 0, 205, 0.6)",
                    strokeWeight: 6
                }
            });
            directionsRenderer.setMap(Map);



            //Departure+Arrival: ECAM
            const Start= {lat: 50.84858958378759, lng: 4.458560946485824};
            const End= {lat: 50.84870475195036, lng: 4.459306220020603};   

            //FCT: Selected Trashs= WaysPoints
            function SelectedWaypoints() {
                const Waypoints= [];
                document.querySelectorAll(".component-checkbox:checked").forEach((checkbox)=> {
                    const row= checkbox.closest("tr");
                    const latitude= parseFloat(row.querySelector(`#LatitudeTrash${row.rowIndex}`).innerText);
                    const longitude= parseFloat(row.querySelector(`#LongitudeTrash${row.rowIndex}`).innerText);
                    Waypoints.push({location: {lat: latitude, lng: longitude}, stopover: true});
                });
                return Waypoints;
            }

            //FCT: Route calculation through selected Trashs
            function CalculateRoute() {
                const WayPoints= SelectedWaypoints();       
                directionsService.route({
                    origin: Start,
                    destination: End,
                    waypoints: WayPoints,
                    optimizeWaypoints: true,
                    travelMode: google.maps.TravelMode.DRIVING
                }, (response,status)=> {
                    if (status===google.maps.DirectionsStatus.OK){
                        directionsRenderer.setDirections(response);
                        TableSummaryRoute(response);
                    } 
                    else{
                        alert("Error Route:" + status);
                    }
                });
            }

            //MAP BUTTON
            document.getElementById("MapButton").addEventListener("click",()=> {
                document.querySelector(".MapArea").style.display= "block";
                CalculateRoute();
                document.querySelector(".TitleMapFlex").scrollIntoView({behavior: "smooth"});
            });
        }





        
        //FCT COORDINATES-->ADDRESS
        async function Address(lat, lng) {
            const response= await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lng}&key=AIzaSyAWczO0nzqJmcu5iLtLfWXe8RF9JgnlRyo`);
            const data= await response.json();
            if (data.status==="OK"){
                return data.results[0].formatted_address;
            } 
            else{
                console.error("Erreur Address: ", data.status);
                return "Address not found";
            }
        }


        //FCT TABLE SUMMARIZING THE ROUTE WITH WAYPOINTS
        async function TableSummaryRoute(response) {
            const TableSummaryyRoute= document.getElementById("TableBodyy");
            TableSummaryyRoute.innerHTML= "";

            //Departure(ECAM) 
            const rowSTART= document.createElement("tr");
            rowSTART.innerHTML= `
                <td>A</td>
                <td>ECAM</td>
                <td>Promenade de l'Alma 50, 1200 Woluwe-Saint-Lambert, Belgique</td>
                <td hidden>50.84858958378759</td>
                <td hidden>4.458560946485824</td>`;
            TableSummaryyRoute.appendChild(rowSTART);

            //WaysPoints
            const WaypointsOrder= response.routes[0].waypoint_order;
            for (let i= 0; i<WaypointsOrder.length; i++) {
                const index= WaypointsOrder[i];
                const trashRow= document.querySelectorAll(".component-checkbox:checked")[index].closest("tr");
                const letter= String.fromCharCode(66 +i); //B,C,D,...
                const trashID= trashRow.cells[2].innerText;
                const latitude= trashRow.cells[6].innerText;
                const longitude= trashRow.cells[7].innerText;
                const address= await Address(latitude, longitude);
                let row= document.createElement("tr");
                row.innerHTML= `
                    <td>${letter}</td>
                    <td>${trashID}</td>
                    <td>${address}</td>
                    <td hidden>${latitude}</td>
                    <td hidden>${longitude}</td>`;
                TableSummaryyRoute.appendChild(row);
            }

            //Arrival(ECAM)
            const rowEND= document.createElement("tr");
            rowEND.innerHTML= `
                <td>${String.fromCharCode(66 +WaypointsOrder.length)}</td>
                <td>ECAM</td>
                <td>Promenade de l'Alma 50, 1200 Woluwe-Saint-Lambert, Belgique</td>
                <td hidden>50.84870475195036</td>
                <td hidden>4.459306220020603</td>`;
            TableSummaryyRoute.appendChild(rowEND);
        }




        //FCT SEND ROUTE +TIME TO TRASHROUTES.JSON
        function SendRouteJSON() {
            const TableRows= document.querySelectorAll("#TableBodyy tr");
            const RouteData= [];

            TableRows.forEach(row=> {
                const cells= row.querySelectorAll("td");
                RouteData.push({
                    letter: cells[0].innerText,
                    id: cells[1].innerText,
                    address: cells[2].innerText,
                    latitude: cells[3]?.innerText,
                    longitude: cells[4]?.innerText
                });
            });
            const currentDate= new Date();
            const dataToSend= {
                timestamp: currentDate.toISOString(),
                route: RouteData
            };


            fetch("/saveRoute",{
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify(dataToSend)
            })
            .then(response=> response.text())
            .then(message=> alert(message))
            .catch(error=> console.error("Error while sending data", error));
        }

    </script>
</body>
</html>
